# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")
---

#
#
# `git-repository` instantiates a GitRepository object, responsible for
# keeping track of commits made to a git repository, making them available as
# blobs to further components in the supply chain.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: git-repository
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      gitImplementation: libgit2
      ignore: ""

---
#
#
# `testing-pipeline` instantiates a `carto.run/Pipeline` object that runs a
# developer-provided Tekton pipeline, based on label matching.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: testing-pipeline
spec:
  urlPath: .status.latestInputs.params[?(@.name=="source-url")].value
  revisionPath: .status.latestInputs.params[?(@.name=="source-revision")].value

  template:
    apiVersion: carto.run/v1alpha1
    kind: Pipeline
    metadata:
      name: $(workload.metadata.name)$
    spec:
      runTemplateName: tekton

      selector:
        resource:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
        matchingLabels:
          pipelines.carto.run/group: $(workload.metadata.labels['pipelines\.carto\.run/group'])$
          pipelines.carto.run/stage: testing

      inputs:
        params:
          - name: source-url
            value: $(sources[0].url)$
          - name: source-revision
            value: $(sources[0].revision)$


---
#
#
# `image-build` instantiates a `kpack/Image` object, responsible for ensuring that
# there's a container image built and pushed to a container image registry
# whenever there's either new source code, or its image builder gets na update.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image-build
spec:
  imagePath: .status.latestImage

  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: $(workload.metadata.name)$
    spec:
      tag: #@ data.values.image_prefix + "$(workload.metadata.name)$"
      serviceAccount: service-account
      builder:
        kind: ClusterBuilder
        name: go-builder
      source:
        blob:
          url: $(sources[0].url)$

---
#
#
# `app-deploy` instantiates a deployment making use of a built container image.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: app-deploy
spec:
  template:
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: $(workload.metadata.name)$
    spec:
      selector:
        matchLabels:
          app: $(workload.metadata.name)$
      template:
        metadata:
          labels:
            app: $(workload.metadata.name)$
        spec:
          containers:
            - name: main
              image: $(images[0].image)$
