// Code generated by counterfeiter. DO NOT EDIT.
package artifactsfakes

import (
	"sync"

	"github.com/vmware-tanzu/cartographer/pkg/apis/v1alpha1"
	"github.com/vmware-tanzu/cartographer/pkg/artifacts"
)

type FakeArtifactManager struct {
	AddStub        func(*v1alpha1.Artifact)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 *v1alpha1.Artifact
	}
	FinalizeStub        func() ([]v1alpha1.Artifact, bool)
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
	}
	finalizeReturns struct {
		result1 []v1alpha1.Artifact
		result2 bool
	}
	finalizeReturnsOnCall map[int]struct {
		result1 []v1alpha1.Artifact
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifactManager) Add(arg1 *v1alpha1.Artifact) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 *v1alpha1.Artifact
	}{arg1})
	stub := fake.AddStub
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if stub != nil {
		fake.AddStub(arg1)
	}
}

func (fake *FakeArtifactManager) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeArtifactManager) AddCalls(stub func(*v1alpha1.Artifact)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeArtifactManager) AddArgsForCall(i int) *v1alpha1.Artifact {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeArtifactManager) Finalize() ([]v1alpha1.Artifact, bool) {
	fake.finalizeMutex.Lock()
	ret, specificReturn := fake.finalizeReturnsOnCall[len(fake.finalizeArgsForCall)]
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
	}{})
	stub := fake.FinalizeStub
	fakeReturns := fake.finalizeReturns
	fake.recordInvocation("Finalize", []interface{}{})
	fake.finalizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtifactManager) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *FakeArtifactManager) FinalizeCalls(stub func() ([]v1alpha1.Artifact, bool)) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = stub
}

func (fake *FakeArtifactManager) FinalizeReturns(result1 []v1alpha1.Artifact, result2 bool) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 []v1alpha1.Artifact
		result2 bool
	}{result1, result2}
}

func (fake *FakeArtifactManager) FinalizeReturnsOnCall(i int, result1 []v1alpha1.Artifact, result2 bool) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	if fake.finalizeReturnsOnCall == nil {
		fake.finalizeReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.Artifact
			result2 bool
		})
	}
	fake.finalizeReturnsOnCall[i] = struct {
		result1 []v1alpha1.Artifact
		result2 bool
	}{result1, result2}
}

func (fake *FakeArtifactManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtifactManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ artifacts.ArtifactManager = new(FakeArtifactManager)
